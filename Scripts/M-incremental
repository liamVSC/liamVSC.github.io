local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (Byte(byte, 2) == 81) then
			repeatNext = StrToNumber(Sub(byte, 1, 1));
			return "";
		else
			local a = Char(StrToNumber(byte, 16));
			if repeatNext then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
			return Res - (Res % 1);
		else
			local Plc = 2 ^ (Start - 1);
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = DIP + 1;
		return a;
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + 2);
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, DIP + 3);
		DIP = DIP + 4;
		return (d * 16777216) + (c * 65536) + (b * 256) + a;
	end
	local function gFloat()
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1;
		local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
		local Exponent = gBit(Right, 21, 31);
		local Sign = ((gBit(Right, 32) == 1) and -1) or 1;
		if (Exponent == 0) then
			if (Mantissa == 0) then
				return Sign * 0;
			else
				Exponent = 1;
				IsNormal = 0;
			end
		elseif (Exponent == 2047) then
			return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
	end
	local function gString(Len)
		local Str;
		if not Len then
			Len = gBits32();
			if (Len == 0) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local Type = gBits8();
			local Cons;
			if (Type == 1) then
				Cons = gBits8() ~= 0;
			elseif (Type == 2) then
				Cons = gFloat();
			elseif (Type == 3) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local Descriptor = gBits8();
			if (gBit(Descriptor, 1, 1) == 0) then
				local Type = gBit(Descriptor, 2, 3);
				local Mask = gBit(Descriptor, 4, 6);
				local Inst = {gBits16(),gBits16(),nil,nil};
				if (Type == 0) then
					Inst[3] = gBits16();
					Inst[4] = gBits16();
				elseif (Type == 1) then
					Inst[3] = gBits32();
				elseif (Type == 2) then
					Inst[3] = gBits32() - (2 ^ 16);
				elseif (Type == 3) then
					Inst[3] = gBits32() - (2 ^ 16);
					Inst[4] = gBits16();
				end
				if (gBit(Mask, 1, 1) == 1) then
					Inst[2] = Consts[Inst[2]];
				end
				if (gBit(Mask, 2, 2) == 1) then
					Inst[3] = Consts[Inst[3]];
				end
				if (gBit(Mask, 3, 3) == 1) then
					Inst[4] = Consts[Inst[4]];
				end
				Instrs[Idx] = Inst;
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1];
				if (Enum <= 23) then
					if (Enum <= 11) then
						if (Enum <= 5) then
							if (Enum <= 2) then
								if (Enum <= 0) then
									Stk[Inst[2]][Inst[3]] = Inst[4];
								elseif (Enum > 1) then
									if Stk[Inst[2]] then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								else
									local A = Inst[2];
									Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
								end
							elseif (Enum <= 3) then
								Stk[Inst[2]]();
							elseif (Enum == 4) then
								Stk[Inst[2]] = {};
							else
								do
									return;
								end
							end
						elseif (Enum <= 8) then
							if (Enum <= 6) then
								Stk[Inst[2]] = Env[Inst[3]];
							elseif (Enum == 7) then
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
							else
								Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
							end
						elseif (Enum <= 9) then
							Stk[Inst[2]] = Upvalues[Inst[3]];
						elseif (Enum == 10) then
							Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
						else
							local A = Inst[2];
							Stk[A] = Stk[A]();
						end
					elseif (Enum <= 17) then
						if (Enum <= 14) then
							if (Enum <= 12) then
								Stk[Inst[2]] = Inst[3] ~= 0;
							elseif (Enum > 13) then
								Stk[Inst[2]] = {};
							else
								Stk[Inst[2]] = Env[Inst[3]];
							end
						elseif (Enum <= 15) then
							Stk[Inst[2]] = Stk[Inst[3]][Stk[Inst[4]]];
						elseif (Enum == 16) then
							local A = Inst[2];
							Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
						else
							local A = Inst[2];
							Stk[A](Unpack(Stk, A + 1, Inst[3]));
						end
					elseif (Enum <= 20) then
						if (Enum <= 18) then
							Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
						elseif (Enum > 19) then
							do
								return;
							end
						else
							VIP = Inst[3];
						end
					elseif (Enum <= 21) then
						Stk[Inst[2]] = Inst[3];
					elseif (Enum > 22) then
						Stk[Inst[2]] = Stk[Inst[3]];
					else
						VIP = Inst[3];
					end
				elseif (Enum <= 35) then
					if (Enum <= 29) then
						if (Enum <= 26) then
							if (Enum <= 24) then
								Stk[Inst[2]] = Inst[3] ~= 0;
							elseif (Enum > 25) then
								Stk[Inst[2]] = Inst[3];
							else
								local A = Inst[2];
								local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
								Top = (Limit + A) - 1;
								local Edx = 0;
								for Idx = A, Top do
									Edx = Edx + 1;
									Stk[Idx] = Results[Edx];
								end
							end
						elseif (Enum <= 27) then
							local A = Inst[2];
							Stk[A](Unpack(Stk, A + 1, Inst[3]));
						elseif (Enum == 28) then
							local NewProto = Proto[Inst[3]];
							local NewUvals;
							local Indexes = {};
							NewUvals = Setmetatable({}, {__index=function(_, Key)
								local Val = Indexes[Key];
								return Val[1][Val[2]];
							end,__newindex=function(_, Key, Value)
								local Val = Indexes[Key];
								Val[1][Val[2]] = Value;
							end});
							for Idx = 1, Inst[4] do
								VIP = VIP + 1;
								local Mvm = Instr[VIP];
								if (Mvm[1] == 23) then
									Indexes[Idx - 1] = {Stk,Mvm[3]};
								else
									Indexes[Idx - 1] = {Upvalues,Mvm[3]};
								end
								Lupvals[#Lupvals + 1] = Indexes;
							end
							Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
						else
							Stk[Inst[2]][Inst[3]] = Inst[4];
						end
					elseif (Enum <= 32) then
						if (Enum <= 30) then
							Stk[Inst[2]] = Upvalues[Inst[3]];
						elseif (Enum == 31) then
							local A = Inst[2];
							local T = Stk[A];
							local B = Inst[3];
							for Idx = 1, B do
								T[Idx] = Stk[A + Idx];
							end
						else
							Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
						end
					elseif (Enum <= 33) then
						Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
					elseif (Enum > 34) then
						local NewProto = Proto[Inst[3]];
						local NewUvals;
						local Indexes = {};
						NewUvals = Setmetatable({}, {__index=function(_, Key)
							local Val = Indexes[Key];
							return Val[1][Val[2]];
						end,__newindex=function(_, Key, Value)
							local Val = Indexes[Key];
							Val[1][Val[2]] = Value;
						end});
						for Idx = 1, Inst[4] do
							VIP = VIP + 1;
							local Mvm = Instr[VIP];
							if (Mvm[1] == 23) then
								Indexes[Idx - 1] = {Stk,Mvm[3]};
							else
								Indexes[Idx - 1] = {Upvalues,Mvm[3]};
							end
							Lupvals[#Lupvals + 1] = Indexes;
						end
						Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
					else
						local A = Inst[2];
						local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
						Top = (Limit + A) - 1;
						local Edx = 0;
						for Idx = A, Top do
							Edx = Edx + 1;
							Stk[Idx] = Results[Edx];
						end
					end
				elseif (Enum <= 41) then
					if (Enum <= 38) then
						if (Enum <= 36) then
							if Stk[Inst[2]] then
								VIP = VIP + 1;
							else
								VIP = Inst[3];
							end
						elseif (Enum == 37) then
							local A = Inst[2];
							local T = Stk[A];
							for Idx = A + 1, Inst[3] do
								Insert(T, Stk[Idx]);
							end
						else
							local A = Inst[2];
							Stk[A](Stk[A + 1]);
						end
					elseif (Enum <= 39) then
						local A = Inst[2];
						Stk[A](Stk[A + 1]);
					elseif (Enum > 40) then
						local A = Inst[2];
						local T = Stk[A];
						local B = Inst[3];
						for Idx = 1, B do
							T[Idx] = Stk[A + Idx];
						end
					else
						local A = Inst[2];
						Stk[A] = Stk[A]();
					end
				elseif (Enum <= 44) then
					if (Enum <= 42) then
						Stk[Inst[2]]();
					elseif (Enum == 43) then
						local A = Inst[2];
						local B = Stk[Inst[3]];
						Stk[A + 1] = B;
						Stk[A] = B[Inst[4]];
					else
						local A = Inst[2];
						Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
					end
				elseif (Enum <= 45) then
					Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
				elseif (Enum == 46) then
					local A = Inst[2];
					local B = Stk[Inst[3]];
					Stk[A + 1] = B;
					Stk[A] = B[Inst[4]];
				else
					Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
				end
				VIP = VIP + 1;
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCall("LOL!4E3Q0003043Q0067616D65030A3Q004765745365727669636503073Q00506C6179657273030B3Q004C6F63616C506C6179657203093Q0043686172616374657203113Q005265706C69636174656453746F7261676503073Q0052656D6F74657303063Q0073686172656403083Q006175746F53652Q6C03083Q006175746F4D696E65030B3Q006175746F52656269727468030A3Q006C6F6164737472696E6703073Q00482Q747047657403463Q00682Q7470733A2Q2F6769746875622E636F6D2F462Q6F746167657375732F57696E6455492F72656C65617365732F6C61746573742F646F776E6C6F61642F6D61696E2E6C7561030C3Q0043726561746557696E646F7703053Q005469746C65030D3Q0067616D6544657374726F79657203043Q0049636F6E030B3Q006C61796F75742D6772696403063Q00417574686F72030A3Q006279206C69616D56534303063Q00466F6C64657203043Q0053697A6503053Q005544696D32030A3Q0066726F6D4F2Q66736574025Q00208240025Q00C07C40030B3Q005472616E73706172656E742Q0103053Q005468656D6503043Q004461726B03093Q00526573697A61626C65030C3Q00536964654261725769647468026Q006940031B3Q004261636B67726F756E64496D6167655472616E73706172656E637902E17A14AE47E1DA3F030D3Q004869646553656172636842617203103Q005363726F2Q6C426172456E61626C6564010003093Q004B657953797374656D2Q033Q004B657903043Q004E6F7465031E3Q007072652Q7320676574206B657920666F7220646973636F7264206C696E6B2Q033Q0055524C03253Q00682Q7470733A2Q2F646973636F72642E636F6D2F696E766974652F3861703877466E67686B03073Q00536176654B6579030C3Q00536574546F2Q676C654B657903043Q00456E756D03073Q004B6579436F646503013Q00482Q033Q0054616203043Q00486F6D6503053Q00686F75736503063Q004C6F636B656403093Q0050617261677261706803223Q0064657374726F79696E67207368692Q74792067616D6573206279207468652064617903043Q004465736303073Q006C69616D56534303073Q004661726D696E6703073Q007069636B61786503063Q00546F2Q676C6503093Q006175746F2073652Q6C034Q0003043Q005479706503083Q00436865636B626F7803073Q0044656661756C7403083Q0043612Q6C6261636B03093Q006175746F206D696E65030C3Q006175746F2072656269727468032E3Q006175746F206D696E65206E2Q65647320746F20626520746F2Q676C656420666F72207468697320746F20776F726B03083Q0053652Q74696E67732Q033Q00636F6703073Q004B657962696E6403123Q004B657962696E6420746F206F70656E20756903053Q0056616C756503013Q004703093Q0053656C656374546162026Q00F03F008A3Q0012063Q00013Q00202E5Q000200121A000200034Q002C3Q00020002002Q205Q0004002Q2000013Q0005001206000200013Q00202E00020002000200121A000400064Q002C000200040002002Q2000020002000700061C00033Q000100012Q00173Q00013Q001206000400084Q0004000500024Q000C00065Q00061C00070001000100012Q00173Q00034Q0029000500020001001008000400090005001206000400084Q0004000500024Q000C00065Q00061C00070002000100012Q00173Q00024Q00290005000200010010080004000A0005001206000400084Q0004000500024Q000C00065Q00061C00070003000100012Q00173Q00024Q00290005000200010010080004000B00050012060004000C3Q001206000500013Q00202E00050005000D00121A0007000E4Q0019000500074Q000700043Q00022Q000B00040001000200202E00050004000F2Q000400073Q000D00302Q00070010001100302Q00070012001300302Q00070014001500302Q000700160011001206000800183Q002Q2000080008001900121A0009001A3Q00121A000A001B4Q002C0008000A000200100800070017000800302Q0007001C001D00302Q0007001E001F00302Q00070020001D00302Q00070021002200302Q00070023002400302Q00070025001D00302Q0007002600272Q000400083Q00042Q0004000900013Q00121A000A00114Q002900090001000100100800080029000900302Q0008002A002B00302Q0008002C002D00302Q0008002E001D0010080007002800082Q002C00050007000200202E00060005002F001206000800303Q002Q20000800080031002Q200008000800322Q001100060008000100202E0006000500332Q000400083Q000300302Q00080010003400302Q00080012003500302Q0008003600272Q002C00060008000200202E0007000600372Q000400093Q000200302Q00090010003800302Q00090039003A2Q002C00070009000200202E0008000500332Q0004000A3Q000300302Q000A0010003B00302Q000A0012003C00302Q000A003600272Q002C0008000A000200202E00090008003D2Q0004000B3Q000500302Q000B0010003E00302Q000B0039003F00302Q000B0040004100302Q000B0042002700022F000C00043Q001008000B0043000C2Q002C0009000B000200202E000A0008003D2Q0004000C3Q000500302Q000C0010004400302Q000C0039003F00302Q000C0040004100302Q000C0042002700022F000D00053Q001008000C0043000D2Q002C000A000C000200202E000B0008003D2Q0004000D3Q000500302Q000D0010004500302Q000D0039004600302Q000D0040004100302Q000D0042002700022F000E00063Q001008000D0043000E2Q002C000B000D000200202E000C000500332Q0004000E3Q000300302Q000E0010004700302Q000E0012004800302Q000E003600272Q002C000C000E000200202E000D000C00492Q0004000F3Q000400302Q000F0010004900302Q000F0039004A00302Q000F004B004C00061C00100007000100012Q00173Q00053Q001008000F004300102Q002C000D000F000200202E000E0005004D00121A0010004E4Q0011000E001000012Q00053Q00013Q00083Q00093Q00030C3Q0057616974466F724368696C6403103Q0048756D616E6F6964522Q6F745061727403063Q00434672616D6503093Q00776F726B737061636503043Q0053652Q6C2Q033Q0050616403043Q007461736B03043Q0077616974029A5Q99B93F00114Q001E7Q00202E5Q000100121A000200024Q002C3Q00020002002Q2000013Q0003001206000200043Q002Q20000200020005002Q20000200020006002Q20000200020006002Q200002000200030010083Q00030002001206000200073Q002Q2000020002000800121A000300094Q00270002000200010010083Q000300012Q00053Q00017Q00053Q0003063Q0073686172656403083Q006175746F53652Q6C026Q00F03F03043Q007461736B03043Q0077616974000C3Q0012063Q00013Q002Q205Q0002002Q205Q00030006023Q000B00013Q0004133Q000B00012Q001E8Q00033Q000100010012063Q00043Q002Q205Q00052Q00033Q000100010004135Q00012Q00053Q00017Q00093Q0003063Q0073686172656403083Q006175746F4D696E65026Q00F03F03083Q004D696E65644F7265030A3Q004669726553657276657203053Q0053742Q656C026Q00244003043Q007461736B03043Q007761697400103Q0012063Q00013Q002Q205Q0002002Q205Q00030006023Q000F00013Q0004133Q000F00012Q001E7Q002Q205Q000400202E5Q000500121A000200063Q00121A000300074Q00113Q000300010012063Q00083Q002Q205Q00092Q00033Q000100010004135Q00012Q00053Q00017Q00083Q0003063Q00736861726564030B3Q006175746F52656269727468026Q00F03F03073Q0052656269727468030A3Q004669726553657276657203093Q00446F5265626972746803043Q007461736B03043Q0077616974000F3Q0012063Q00013Q002Q205Q0002002Q205Q00030006023Q000E00013Q0004133Q000E00012Q001E7Q002Q205Q000400202E5Q000500121A000200064Q00113Q000200010012063Q00073Q002Q205Q00082Q00033Q000100010004135Q00012Q00053Q00017Q00043Q0003063Q0073686172656403083Q006175746F53652Q6C026Q00F03F027Q004001083Q001206000100013Q002Q20000100010002001008000100033Q001206000100013Q002Q20000100010002002Q200001000100042Q00030001000100012Q00053Q00017Q00043Q0003063Q0073686172656403083Q006175746F4D696E65026Q00F03F027Q004001083Q001206000100013Q002Q20000100010002001008000100033Q001206000100013Q002Q20000100010002002Q200001000100042Q00030001000100012Q00053Q00017Q00043Q0003063Q00736861726564030B3Q006175746F52656269727468026Q00F03F027Q004001083Q001206000100013Q002Q20000100010002001008000100033Q001206000100013Q002Q20000100010002002Q200001000100042Q00030001000100012Q00053Q00017Q00033Q00030C3Q00536574546F2Q676C654B657903043Q00456E756D03073Q004B6579436F646501074Q001E00015Q00202E000100010001001206000300023Q002Q200003000300032Q000F000300034Q00110001000300012Q00053Q00017Q00", GetFEnv(), ...);
